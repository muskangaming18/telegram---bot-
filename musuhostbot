import os
import telebot
import subprocess
import psutil
from telebot import types
from datetime import datetime

# Bot Token & Admin ID
BOT_TOKEN = '7066691760:AAFN-U9vT-91xpQ1kV3xzs_Fw6AOKm_buIw'
ADMIN_ID = 6428661774  # Replace with your Telegram Admin ID
bot = telebot.TeleBot(BOT_TOKEN)

# Helper Functions
os.makedirs("users", exist_ok=True)

def get_user_dir(user_id):
    path = f"users/{user_id}"
    os.makedirs(path, exist_ok=True)
    return path

def list_user_files(user_id):
    path = get_user_dir(user_id)
    return os.listdir(path)

def get_logs_path(user_id, filename):
    return f"users/{user_id}/logs_{filename}.txt"

def get_admin_usage_stats():
    usage = psutil.virtual_memory()
    cpu = psutil.cpu_percent()
    return f"💾 RAM Usage: {usage.percent}%\n⚙️ CPU Usage: {cpu}%"

# Start Command
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("📤 Upload", callback_data="upload"),
        types.InlineKeyboardButton("▶️ Run", callback_data="run"),
        types.InlineKeyboardButton("⏹ Stop", callback_data="stop"),
        types.InlineKeyboardButton("📄 Logs", callback_data="logs"),
        types.InlineKeyboardButton("🗑 Delete", callback_data="delete"),
        types.InlineKeyboardButton("📁 My Files", callback_data="files")
    )
    if message.from_user.id == ADMIN_ID:
        markup.add(types.InlineKeyboardButton("🛠 Admin Panel", callback_data="admin"))
        markup.add(types.InlineKeyboardButton("💳 Premium Buy", callback_data="premium"))

    welcome_message = (
        "👋 *Welcome to Python Hosting Bot!*\n\n"
        "You can upload and run Python scripts here. Use the buttons below to interact.\n\n"
        "*Main Features:*\n"
        "- 📤 Upload `.py` files\n"
        "- ▶️ Run scripts\n"
        "- ⏹ Stop scripts\n"
        "- 📄 View logs\n"
        "- 📁 List your files\n"
        "- 🛠 Admin Panel (admin only)"
    )
    bot.send_message(message.chat.id, welcome_message, reply_markup=markup, parse_mode="Markdown")

# Handle Callback Queries
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id

    if call.data == "upload":
        bot.send_message(call.message.chat.id, "📤 Send me your `.py` file.")

    elif call.data == "files":
        files = list_user_files(user_id)
        if files:
            msg = '\n'.join(f"📁 `{f}`" for f in files)
        else:
            msg = "❌ No files found."
        bot.send_message(call.message.chat.id, msg, parse_mode="Markdown")

    elif call.data == "run":
        files = list_user_files(user_id)
        if not files:
            return bot.send_message(call.message.chat.id, "❌ No files uploaded.")
        keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for f in files:
            keyboard.add(f)
        bot.send_message(call.message.chat.id, "▶️ Choose a file to run:", reply_markup=keyboard)

    elif call.data == "stop":
        if user_id in running_scripts:
            proc = running_scripts[user_id]
            proc.terminate()
            del running_scripts[user_id]
            bot.send_message(call.message.chat.id, "⏹ Script stopped.")
        else:
            bot.send_message(call.message.chat.id, "⚠️ No running script found.")

    elif call.data == "logs":
        files = list_user_files(user_id)
        if not files:
            return bot.send_message(call.message.chat.id, "❌ No files to get logs.")
        keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for f in files:
            keyboard.add(f)
        bot.send_message(call.message.chat.id, "📄 Choose file to view logs:", reply_markup=keyboard)

    elif call.data == "delete":
        files = list_user_files(user_id)
        if not files:
            return bot.send_message(call.message.chat.id, "❌ No files to delete.")
        keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for f in files:
            keyboard.add(f)
        bot.send_message(call.message.chat.id, "🗑 Choose file to delete:", reply_markup=keyboard)

    elif call.data == "admin" and user_id == ADMIN_ID:
        usage_stats = get_admin_usage_stats()
        user_count = len(os.listdir('users'))
        msg = (
            f"🛠 *Admin Panel*\n"
            f"👤 Total Users: {user_count}\n"
            f"{usage_stats}"
        )
        bot.send_message(call.message.chat.id, msg, parse_mode="Markdown")

    elif call.data == "premium" and user_id == ADMIN_ID:
        premium_msg = (
            "💳 *Premium  Panel*\n"
            "DM FOR PREMIUM ACCESS @DIWANI_xD"
        )
        bot.send_message(call.message.chat.id, premium_msg, parse_mode="Markdown")

# File handler: Upload `.py` Files
@bot.message_handler(content_types=['document'])
def handle_docs(message):
    user_id = message.from_user.id
    if not message.document.file_name.endswith(".py"):
        return bot.reply_to(message, "❌ Only `.py` files allowed!")

    file_info = bot.get_file(message.document.file_id)
    downloaded = bot.download_file(file_info.file_path)
    path = os.path.join(get_user_dir(user_id), message.document.file_name)

    with open(path, 'wb') as f:
        f.write(downloaded)

    bot.reply_to(message, f"✅ File `{message.document.file_name}` uploaded.", parse_mode="Markdown")

# Run Selected Script
@bot.message_handler(func=lambda msg: msg.text.endswith(".py"))
def handle_file_selection(message):
    user_id = message.from_user.id
    filename = message.text
    path = os.path.join(get_user_dir(user_id), filename)
    if not os.path.exists(path):
        return bot.send_message(message.chat.id, "❌ File not found.")

    try:
        log_path = get_logs_path(user_id, filename)
        with open(log_path, 'w') as log_file:
            proc = subprocess.Popen(['python3', path], stdout=log_file, stderr=log_file)
        running_scripts[user_id] = proc
        bot.send_message(message.chat.id, f"▶️ Running `{filename}`...", parse_mode="Markdown")
        bot.send_message(message.chat.id, "🔙 Returning to the main menu...", parse_mode="Markdown")

        # Return to main menu
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("📤 Upload", callback_data="upload"),
            types.InlineKeyboardButton("▶️ Run", callback_data="run"),
            types.InlineKeyboardButton("⏹ Stop", callback_data="stop"),
            types.InlineKeyboardButton("📄 Logs", callback_data="logs"),
            types.InlineKeyboardButton("🗑 Delete", callback_data="delete"),
            types.InlineKeyboardButton("📁 My Files", callback_data="files")
        )
        if message.from_user.id == ADMIN_ID:
            markup.add(types.InlineKeyboardButton("🛠 Admin Panel", callback_data="admin"))
            markup.add(types.InlineKeyboardButton("💳 Admin", callback_data="premium"))

        bot.send_message(message.chat.id, "Use the buttons below to interact:", reply_markup=markup, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"❌ Error: {e}")

# View Logs
@bot.message_handler(func=lambda msg: msg.text.startswith("logs_"))
def view_logs(message):
    user_id = message.from_user.id
    filename = message.text
    path = get_logs_path(user_id, filename)
    if os.path.exists(path):
        with open(path, 'r') as f:
            content = f.read()[-4000:]  # last 4000 chars
        bot.send_message(message.chat.id, f"📄 *Logs for {filename}:*\n```\n{content}```", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "❌ Log file not found.")

# Delete File
@bot.message_handler(func=lambda msg: msg.text in list_user_files(msg.from_user.id))
def delete_or_log_handler(message):
    user_id = message.from_user.id
    filename = message.text
    path = os.path.join(get_user_dir(user_id), filename)

    if os.path.exists(path):
        os.remove(path)
        bot.send_message(message.chat.id, f"🗑 Deleted `{filename}`", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "❌ File not found.")

# Running Scripts Dictionary
running_scripts = {}

bot.infinity_polling()